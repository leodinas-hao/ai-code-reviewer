import os
import logging

from dotenv import load_dotenv
import requests
from flask import Flask, request
import openai

# setup logger
logging.basicConfig(filename='logs.log', level=logging.DEBUG, format='%(asctime)s | %(levelname)s | %(message)s')

# load .env
load_dotenv(os.path.join(os.getcwd(), '.env'))
logging.info(f'loading {os.getcwd()}.env')

# get gitlab webhook info
WEBHOOK_PORT = int(os.getenv('WEBHOOK_PORT', 8080))
WEBHOOK_TOKEN = os.getenv('WEBHOOK_TOKEN')

# get gitlab api credentials
GITLAB_URL = os.getenv('GITLAB_URL')
GITLAB_TOKEN = os.getenv('GITLAB_TOKEN', '')

# setup azure openai credentials
openai.api_type = "azure"
openai.api_base = os.getenv('OPENAI_API_KEY')
openai.api_key = os.getenv('OPENAI_API_BASE')
openai.api_version = os.getenv('OPENAI_API_VERSION')

app = Flask(__name__)


@app.route('/webhook', methods=['POST'])
def webhook():
  if request.headers.get("X-Gitlab-Token") != WEBHOOK_TOKEN:
    return "Unauthorized", 403

  logging.info(f'Received event: {request.data}')

  payload = request.json
  if payload and payload.get("object_kind") == "merge_request":
    # a merge request received
    if payload["object_attributes"]["state"] == "opened":
      # only review open request
      project_id = payload["project"]["id"]
      mr_id = payload["object_attributes"]["iid"]
      logging.info(f'Reviewing the merge request [{mr_id}]')
      changes_url = f"{GITLAB_URL}/projects/{project_id}/merge_requests/{mr_id}/changes"
      headers = {"PRIVATE-TOKEN": GITLAB_TOKEN}

      # get changes
      response = requests.get(changes_url, headers=headers)
      mr_changes = response.json()
      diffs = [change["diff"] for change in mr_changes["changes"]]

      # ask chatgpt to review
      pre_prompt = "As a senior developer, review the following code changes and answer code review questions about them. The code changes are provided as git diff strings:"
      questions = "\n\nQuestions:\n1. Can you summarise the changes in a succinct bullet point list\n2. In the diff, are the added or changed code written in a clear and easy to understand way?\n3. Does the code use comments, or descriptive function and variables names that explain what they mean?\n4. based on the code complexity of the changes, could the code be simplified without breaking its functionality? if so can you give example snippets?\n5. Can you find any bugs, if so please explain and reference line numbers?\n6. Do you see any code that could induce security issues?\n"
      messages = [
          {"role": "system",
              "content": "You are a senior developer reviewing code changes."},
          {"role": "user",
           "content": f"{pre_prompt}\n\n{''.join(diffs)}{questions}"},
          {"role": "assistant",
           "content": "Format the response so it renders nicely in GitLab, with nice and organized markdown (use code blocks if needed), and send just the response no comments on the request, when answering include a short version of the question, so we know what it is."},
      ]
      try:
        completions = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            temperature=0.7,
            stream=False,
            messages=messages
        )
        answer = completions.choices[0].message["content"].strip()
        answer += "\n\nFor reference, i was given the following questions: \n"
        for question in questions.split("\n"):
          answer += f"\n{question}"
        answer += "\n\nThis comment was generated by AI merge request reviewer."
        logging.info(answer)
      except Exception as e:
        logging.error(str(e))
        answer = "I'm sorry, I'm not feeling well today. Please ask a human to review this PR."
        answer += "\n\nThis comment was generated by AI merge request reviewer."
        answer += "\n\nError: " + str(e)

      # send comment to gitlab
      logging.info(f'Sending comments back to GitLab for the merge request [{mr_id}]')
      comment_url = f"{GITLAB_URL}/projects/{project_id}/merge_requests/{mr_id}/notes"
      comment_payload = {"body": answer}
      comment_response = requests.post(comment_url, headers=headers, json=comment_payload)
      logging.info(f'Review comment added to Gitlab merge request', extra={
        'response': comment_response.json()
      })

  return "OK", 200


if __name__ == '__main__':
  app.run(host='0.0.0.0', port=WEBHOOK_PORT)
